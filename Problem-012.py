import numpy as np

"""
Euler Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th 
triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

answer = 0
the_answer = 70600674

"""
1) calculate next triangle number
2) count divisors of triangle number
3) quit if triangle number has over 500 divisors
4) goto 1
"""


def calc_triangle_number(n):
    tn = 0
    for j in range(1, n+1):
        tn += j
    return tn


tn_count = 0
tn_value = 0
tn_divisor = 0


def tally_divisors(tn_value):
    tally = 0
    for j in range(1, tn_value+1):
        if tn_value % j == 0:
            tally += 1
    return tally


while tn_divisor <= 500:
    tn_count += 1
    tn_value = calc_triangle_number(tn_count)
    tn_divisor = tally_divisors(tn_value)
    if tn_count % 250 == 0 or tn_divisor > 400:
        print("Triangle number %d => %d with %d divisors" % (tn_count, tn_value, tn_divisor))

answer = tn_value
print("Answer: %d" % answer)
if answer == the_answer:
    print("Pass")
else:
    print("Fail")
